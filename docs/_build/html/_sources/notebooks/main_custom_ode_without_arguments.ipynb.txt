{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Custom ODE (without additional input arguments) Data Generation\n",
    "\n",
    "The insidapy package can also be used together with custom ODE files to quickly generate different datasets. The following example shows how to use the `custom_ode` class to generate data from such an ODE file. \n",
    "\n",
    "This particular notebook explains how to use the codes in case the separete ODE file has NO additional input arguments (i.e., it is a function of the form func(t,x)). In case there are additional arguments, check out the notebook `main_custom_ode_with_arguments.ipynb`.\n",
    "\n",
    "First, the `custom_ode` class is loaded:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "from insidapy.simulate.ode import custom_ode"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Then, the user can define where the separate file with the ODE system is located. The relative path and the filename of the separate function file need to be given as a string. Additionally, the name of the function in the given function file needs to be indicated:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "CUSTOM_ODE_RELATIVE_PATH = '.'\n",
    "CUSTOM_ODE_FILENAME = 'customodefile_without_args'\n",
    "CUSTIM_ODE_FUNC_NAME = 'customode'"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Additionally, the user can either add additional parameters that should be passed to the function file by using the `ode_arguments` input or not. The following example shows the case where no additional parameters are passed to the ODE file. The separate ODE file is located in `docs/notebooks/customodefile_without_args`:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Give information about the ODE system\n",
    "CUSTOM_ODE_SPECIES = ['A', 'B', 'C']\n",
    "CUSTOM_ODE_TSPAN = [0, 3]\n",
    "CUSTOM_ODE_BOUNDS_INITIAL_CONDITIONS = [[2, 0, 0], [3, 1, 0]]\n",
    "\n",
    "# Define the units of the ODE system\n",
    "CUSTOM_ODE_NAME_OF_TIME_UNIT = 'hours'\n",
    "CUSTOM_ODE_NAME_OF_SPECIES_UNITS = ['g/L', 'g/L', 'g/L']"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The separate ODE file could look for example like this (given in markdown format, for the file, check it at `docs/notebooks/customodefile_without_args.py`):\n",
    "\n",
    "```python\n",
    "import numpy as np\n",
    "def customode(t, y):\n",
    "        \"\"\"Custom ODE system. A batch reactor is modeled with two species. The following system\n",
    "        is implemented: A <-[k1],[k2]-> B -[k3]-> C\n",
    "\n",
    "        No arguments are used in this function.\n",
    "\n",
    "        Args:\n",
    "            y (array): Concentration of species of shape [n,].\n",
    "            t (scalar): time.\n",
    "\n",
    "        Returns:\n",
    "            array: dydt - Derivative of the species of shape [n,].\n",
    "        \"\"\"\n",
    "    \n",
    "        # Variables  \n",
    "        A = y[0]\n",
    "        B = y[1]\n",
    "        C = y[2]\n",
    "\n",
    "        # Parameters\n",
    "        k1 = 4\n",
    "        k2 = 2\n",
    "        k3 = 6   \n",
    "\n",
    "        # Rate expressions\n",
    "        dAdt = k2*B - k1*A\n",
    "        dBdt = k1*A - k2*B - k3*B\n",
    "        dCdt = k3*B\n",
    "\n",
    "        # Vectorization\n",
    "        dydt = np.array((dAdt, dBdt, dCdt))\n",
    "\n",
    "        # Return\n",
    "        return dydt.reshape(-1,)\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Similar to the `batch`-class example above, the instance is created (in case no additional arguments should be passed to the separate ODE function, just ommit the parameter `ode_arguments` and create the separate function file only by `def ODE(t,y)`):\n",
    "\n",
    "Let us use generate only one batch here. We will receive a warning that the number of batches is too little for an LHS sampling method. Automatically, the mid-point of the given upper- and lower bounds is taken as initial condition."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[!] IMPORTANT: It seems that you changed the default bounds of the species. Make sure the order of the indicated bounds is the following: ['A', 'B', 'C']\n",
      "[!] Warning: You are generating only one batch. Taking the middle point of upper and lower bounds.\n"
     ]
    }
   ],
   "source": [
    "data = custom_ode(  filename_custom_ode=CUSTOM_ODE_FILENAME,                        # REQUIRED: Filename of the file containing the ODE system.\n",
    "                    relative_path_custom_ode=CUSTOM_ODE_RELATIVE_PATH,              # REQUIRED: Relative path to the file containing the ODE system.\n",
    "                    custom_ode_function_name=CUSTIM_ODE_FUNC_NAME,                  # REQUIRED: Name of the ODE function in the file.\n",
    "                    species=CUSTOM_ODE_SPECIES,                                     # REQUIRED: List of species.\n",
    "                    bounds_initial_conditions=CUSTOM_ODE_BOUNDS_INITIAL_CONDITIONS, # REQUIRED: Bounds for initial conditions.\n",
    "                    time_span=CUSTOM_ODE_TSPAN,                                     # REQUIRED: Time span for integration.\n",
    "                    name_of_time_unit=CUSTOM_ODE_NAME_OF_TIME_UNIT,                 # OPTIONAL: Name of time unit. Defaults to \"h\".\n",
    "                    name_of_species_units=CUSTOM_ODE_NAME_OF_SPECIES_UNITS,         # OPTIONAL: Name of species unit. Defaults to \"g/L\".\n",
    "                    nbatches=1,                                                     # OPTIONAL: Number of batches. Defaults to 1.\n",
    "                    npoints_per_batch=50,                                           # OPTIONAL: Number of points per batch and per species. Defaults to 50.\n",
    "                    noise_mode='percentage',                                        # OPTIONAL: Noise mode. Defaults to \"percentage\".\n",
    "                    noise_percentage=2.5,                                           # OPTIONAL: Noise percentage (in case mode is \"percentage\"). Defaults to 5%.      \n",
    "                    random_seed=0,                                                  # OPTIONAL: Random seed for reproducibility. Defaults to 0.\n",
    "                    initial_condition_generation_method='LHS',                      # OPTIONAL: Method for generating initial conditions. Defaults to \"LHS\".\n",
    "                    name_of_time_vector='time')                                     # OPTIONAL: Name of time vector. Defaults to \"time\"."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "After this preparation work, we can run the experiments to create some in-silico data using the `run_experiments` method. We can then for example check the data of the first experiment."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[+] Experiments done.\n"
     ]
    }
   ],
   "source": [
    "data.run_experiments()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As in the `batch` class, the generated data can be plotted:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[+] Saving figure:\n",
      "\t->png: .\\figures\\custom_odes_with_args.png\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 720x360 with 3 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "data.plot_experiments(  show=True,\n",
    "                        save=True, \n",
    "                        figname='custom_odes_with_args', \n",
    "                        save_figure_directory=r'.\\figures', \n",
    "                        save_figure_exensions=['png'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Most modeling approaches require a training dataset and a separate testing dataset. To generate separate datasets, the user can apply a splitting in an sklearn-manner. There is no default value set. In case the user calls the function, a `test_splitratio` in the range [0,1) needs to be chosen. The value represents the fraction of the total number of batches generated used for the test set. The data is then splitted and stored in the data object as `data.training` and `data.testing`. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[!] Warning: The number of training batches is 0. All batches are used for testing. Using at least one batch for training now!\n"
     ]
    }
   ],
   "source": [
    "data.train_test_split(test_splitratio=0.2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can now also plot the experiments while showing the training and testing runs individually. The method lets us save the figure using a path (`save_figure_directory`), a name (`figname`) and an some extensions (`save_figure_exensions`) as a list. By using `show=False`, the plot will not be displayed in a running code."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[+] Saving figure:\n",
      "\t->png: .\\figures\\custom_custom_ode_train_test.png\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 720x360 with 3 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "data.plot_train_test_experiments(   save=True, \n",
    "                                    show=False,\n",
    "                                    figname=f'{data.example}_custom_ode_train_test',\n",
    "                                    save_figure_directory=r'.\\figures', \n",
    "                                    save_figure_exensions=['png'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "After the simulation, one can export the data as XLSX files. By choosing `which_dataset` to be `training` (only executable if `train_test_split` was applied), `testing` (only executable if `train_test_split` was applied), or `all` (always executable), the corresponding data is exported to the indicated location:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[+] Exported batch data to excel.\n",
      "\t-> Dataset: ALL (options: training, testing, all)\n",
      "\t-> Noise free data to: .\\data\\custom_all_batchdata.xlsx\n",
      "\t-> Noisy data to: .\\data\\custom_all_batchdata_noisy.xlsx\n",
      "[+] Exported batch data to excel.\n",
      "\t-> Dataset: TRAINING (options: training, testing, all)\n",
      "\t-> Noise free data to: .\\data\\custom_training_batchdata.xlsx\n",
      "\t-> Noisy data to: .\\data\\custom_training_batchdata_noisy.xlsx\n",
      "[!] WARNING: Test data is empty! Adjust train_test_split ratio!\n",
      "[+] Exported batch data to excel.\n",
      "\t-> Dataset: TESTING (options: training, testing, all)\n",
      "\t-> Noise free data to: .\\data\\custom_testing_batchdata.xlsx\n",
      "\t-> Noisy data to: .\\data\\custom_testing_batchdata_noisy.xlsx\n"
     ]
    }
   ],
   "source": [
    "data.export_dict_data_to_excel(destination=r'.\\data', which_dataset='all')      # Exports all the data\n",
    "data.export_dict_data_to_excel(destination=r'.\\data', which_dataset='training') # Exports the training data\n",
    "data.export_dict_data_to_excel(destination=r'.\\data', which_dataset='testing')  # Exports the training data"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "myenv",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.11"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
